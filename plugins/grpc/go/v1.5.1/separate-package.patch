diff --git a/cmd/protoc-gen-go-grpc/grpc.go b/cmd/protoc-gen-go-grpc/grpc.go
index abc21602..7d9dd638 100644
--- a/cmd/protoc-gen-go-grpc/grpc.go
+++ b/cmd/protoc-gen-go-grpc/grpc.go
@@ -20,6 +20,7 @@ package main
 
 import (
 	"fmt"
+	"path"
 	"strconv"
 	"strings"
 
@@ -136,8 +137,27 @@ func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.Generated
 	if len(file.Services) == 0 {
 		return nil
 	}
-	filename := file.GeneratedFilenamePrefix + "_grpc.pb.go"
-	g := gen.NewGeneratedFile(filename, file.GoImportPath)
+	var g *protogen.GeneratedFile
+	if !*separatePackage {
+		filename := file.GeneratedFilenamePrefix + "_grpc.pb.go"
+		g = gen.NewGeneratedFile(filename, file.GoImportPath)
+	} else {
+		file.GoPackageName += "grpc"
+		dir := path.Dir(file.GeneratedFilenamePrefix)
+		base := path.Base(file.GeneratedFilenamePrefix)
+		file.GeneratedFilenamePrefix = path.Join(
+			dir,
+			string(file.GoPackageName),
+			base,
+		)
+		g = gen.NewGeneratedFile(
+			file.GeneratedFilenamePrefix+"_grpc.pb.go",
+			protogen.GoImportPath(path.Join(
+				string(file.GoImportPath),
+				string(file.GoPackageName),
+			)),
+		)
+	}
 	// Attach all comments associated with the syntax field.
 	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
 	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
diff --git a/cmd/protoc-gen-go-grpc/main.go b/cmd/protoc-gen-go-grpc/main.go
index 183ba697..d0e1be60 100644
--- a/cmd/protoc-gen-go-grpc/main.go
+++ b/cmd/protoc-gen-go-grpc/main.go
@@ -46,6 +46,7 @@ const version = "1.5.1"
 
 var requireUnimplemented *bool
 var useGenericStreams *bool
+var separatePackage *bool
 
 func main() {
 	showVersion := flag.Bool("version", false, "print the version and exit")
@@ -57,6 +58,7 @@ func main() {
 
 	var flags flag.FlagSet
 	requireUnimplemented = flags.Bool("require_unimplemented_servers", true, "set to false to match legacy behavior")
+	separatePackage = flags.Bool("separate_package", false, "set to true to write generated files to a separate grpc package")
 	useGenericStreams = flags.Bool("use_generic_streams_experimental", true, "set to true to use generic types for streaming client and server objects; this flag is EXPERIMENTAL and may be changed or removed in a future release")
 
 	protogen.Options{
