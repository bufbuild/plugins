diff --git a/Sources/protoc-gen-swift/FileGenerator.swift b/Sources/protoc-gen-swift/FileGenerator.swift
index 87c05aa7..4083d490 100644
--- a/Sources/protoc-gen-swift/FileGenerator.swift
+++ b/Sources/protoc-gen-swift/FileGenerator.swift
@@ -101,6 +101,13 @@ class FileGenerator {
                 p.print("import \(i)\n")
             }
         }
+        let neededCustomImports = generatorOptions.extraModuleImports
+        if !neededCustomImports.isEmpty{
+          p.print()
+          for i in neededCustomImports {
+            p.print("import \(i)\n")
+          }
+        }

         p.print("\n")
         generateVersionCheck(printer: &p)
diff --git a/Sources/protoc-gen-swift/GeneratorOptions.swift b/Sources/protoc-gen-swift/GeneratorOptions.swift
index d505fdf1..20353d18 100644
--- a/Sources/protoc-gen-swift/GeneratorOptions.swift
+++ b/Sources/protoc-gen-swift/GeneratorOptions.swift
@@ -49,6 +49,7 @@ class GeneratorOptions {
   let outputNaming: OutputNaming
   let protoToModuleMappings: ProtoFileToModuleMappings
   let visibility: Visibility
+  let extraModuleImports: [String]

   /// A string snippet to insert for the visibility
   let visibilitySourceSnippet: String
@@ -58,6 +59,7 @@ class GeneratorOptions {
     var moduleMapPath: String?
     var visibility: Visibility = .internal
     var swiftProtobufModuleName: String? = nil
+    var externalModuleImports: [String] = []

     for pair in parseParameter(string:parameter) {
       switch pair.key {
@@ -88,9 +90,15 @@ class GeneratorOptions {
           throw GenerationError.invalidParameterValue(name: pair.key,
                                                       value: pair.value)
         }
-      default:
-        throw GenerationError.unknownParameter(name: pair.key)
-      }
+      case "ExtraModuleImports":
+        if !pair.value.isEmpty {
+            externalModuleImports.append(pair.value)
+        } else {
+          throw GenerationError.invalidParameterValue(name: pair.key, value: pair.value)
+        }
+        default:
+          throw GenerationError.unknownParameter(name: pair.key)
+        }
     }

     if let moduleMapPath = moduleMapPath {
@@ -107,6 +115,7 @@ class GeneratorOptions {

     self.outputNaming = outputNaming
     self.visibility = visibility
+    self.extraModuleImports = externalModuleImports

     switch visibility {
     case .internal:
